name: Build BPB-Wizard

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          check-latest: true

      - name: Install ARM64 Cross Compiler
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Determine Release Draft Status
        id: draft_status
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "is_draft=false" >> $GITHUB_OUTPUT
            else
              echo "is_draft=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "is_draft=true" >> $GITHUB_OUTPUT
          fi

      - name: Get the Git tag version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "latest")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build binaries for multiple platforms
        env:
          GOOS: darwin,windows,linux
          GOARCH: amd64,arm64
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          mkdir -p build
          for OS in ${GOOS//,/ }; do
            for ARCH in ${GOARCH//,/ }; do
              echo "Building for $OS/$ARCH with version $VERSION"
          
              # Set CC for linux/arm64 to aarch64-linux-gnu-gcc
              if [ "$OS" = "linux" ] && [ "$ARCH" = "arm64" ]; then
                export CC=aarch64-linux-gnu-gcc
                export CGO_ENABLED=1
              fi

              # Build binary
              if [ "$OS" = "windows" ]; then
                GOOS=$OS GOARCH=$ARCH go build -ldflags "-s -w" -o build/bpb-wizard-$VERSION-$OS-$ARCH.exe
              fi

              # Set executable permissions for non-Windows binaries
              if [ "$OS" != "windows" ]; then
                GOOS=$OS GOARCH=$ARCH go build -ldflags "-s -w" -o build/bpb-wizard-$VERSION-$OS-$ARCH
                chmod +x build/bpb-wizard-$VERSION-$OS-$ARCH
              fi
            done
          done

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/*
          tag: ${{ steps.get_version.outputs.VERSION }}
          draft: ${{ steps.draft_status.outputs.is_draft }}
          overwrite: true
          file_glob: true